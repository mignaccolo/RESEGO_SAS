%macro score_with_random_forest_base(_infile_data_score_,_outfile_data_score_,list_var_file,
path_for_binary_mdl_impl,model_identifier,_target_type_,_targety_=Y,_targetn_=N,_length_target_=32)/ 
store source des="score data set with a single random forest model";

/* DESCRIPTION
Score a data set with a single Random Forest model.
*/

/* PARAMETERS
1) infile_data_score_: name (SASLIBRARY.SASFILENAME) of the SAS table from which the TRAIN data set was generated.
2) _outfile_data_score_: name (SASLIBRARY.SASFILENAME) of the SAS table with the TRAIN data set.
3) list_var_file: name (SASLIBRARY.SASFILENAME) of the SAS table with the type and scope of each variable in the _infile_data_ data set.
4) path_for_binary_mdl_impl: a valid system path were binary implementation of the model can be stored to score additional data sets.
5) model_identifier: a string identifiying the model specification e.g. RANFOR_example_1.
6) _target_type_: ("binary","nominal","interval") The type of the target variable.
7) _targety_: value of the target variable which indicate an "event". By default _targety_=Y. (Used only when target is binary).
8) _targetn_: value of the target variable which indicate the lack of an  "event". By default _targetn_=N. (Used only when target is binary).
9) _length_target_: the "string" length of the binary/nominal variable. The default value _length_target_=32 should ensure that the 
	levels of the target variable are not trucate: if a possible value of the target variable is a string of 40 chars, 
	only the first 32 will be reported.
*/

%put Executing: score_with_random_forest_base;

/* declare variables */
%local _filename_; /* full (path + file name) system  name for the binary file where details of the model are stored */
%local target_variable; /* the name of the target variable  */
%local id_variables; /* the variable/ identifying a records (e.g. person id ,transaction id) which we want to display when scoring a data set */ 
%local dsempty; /* flag indicating the absence (1) or not (0) of the target variable in the data set to score */
%local outscore_statement; /* keep/rename adjustement for the score output generated by HPFOREST */
%local id_statement; /* ID statement for PROC HP4SCORE */
%local id_statement_comma; /* as id_statement but elements are separeted by comma */
%local for_target_var; /* input value for _target_var_ parameter when calling transpose_nominal_score macro */

/* check if the target variable type is one the admitted ones */
%if (%sysfunc(compare("binary","&_target_type_")) ne 0) and 
	(%sysfunc(compare("nominal","&_target_type_")) ne 0) and 
	(%sysfunc(compare("interval","&_target_type_")) ne 0) %then %do;
	%put ERROR: Valid values for _target_type_ parameters are "binary", "nominal", "interval";%goto exit;
%end;

/* define target variable */
proc sql NOPRINT;
	select length(strip(VARNAME)) into: _length_ from  &list_var_file where LEGEND eq 'TG';
	select strip(VARNAME) length=&_length_ into: target_variable from &list_var_file where LEGEND eq 'TG';
quit;

/* define id variables  */
proc sql NOPRINT;select strip(VARNAME) into: id_variables  separated by ' '  from &list_var_file where LEGEND eq 'ID';quit;

/* define ID statement in PROC HP4SCORE */
%let id_statement=&id_variables;

/* prepare based on target type the keep/rename statements for the data set output of proc HPFOREST -- START */
	/* interval target */
%if %sysfunc(compare("interval","&_target_type_")) eq 0 %then %do; 
	%let outscore_statement= P_&target_variable rename%str(=%()P_&target_variable %str(=)predicted%str(%));
%end;
	/* binary target */
%if %sysfunc(compare("binary","&_target_type_")) eq 0 %then %do;
	%let outscore_statement= P_&target_variable.&_targety_ rename%str(=%()P_&target_variable.&_targety_%str(=p%));
%end;
	/* nominal target */
%if %sysfunc(compare("nominal","&_target_type_")) eq 0 %then %do;
	%let outscore_statement= P_&target_variable%str(:) I_&target_variable;
%end;
/* prepare based on target type the keep/rename statements for the data set output of proc HPFOREST -- END */

/* build fileref for model binary file */
%let _filename_=&path_for_binary_mdl_impl.&model_identifier.;
filename inmodel "&_filename_";

/*%put AAA &_target_type_;*/
/*%put BBB &target_variable;*/
/*%put CCC &id_variables;*/
/*%put DDD &outscore_statement;*/


/* check if data set to score contains the target variable. if so add target variable to the list of varible to keep in the scored file -- START */
proc datasets nodetails nolist; 
   contents data=&_infile_data_score_ out=_contents_ (keep=NAME LENGTH where=(strip(NAME)="&target_variable"));
run;

%let dsempty=0;
data _null_;
	if eof then do;call symput('dsempty',1);end;
	stop;
	set  _contents_ end=eof;
run;
%let dsempty=%sysfunc(strip(&dsempty));

	/* update outscore and id statements if target variable is not in the data set */
%if %sysfunc(compare("0","&dsempty")) eq 0 %then %do;
	%let outscore_statement=&target_variable.%str( )&outscore_statement.;
	%let id_statement=&id_statement.%str( )&target_variable;
	%let for_target_var=&target_variable;
%end;
%else %do;
	%let for_target_var=;
%end;
/* check if data set to score contains the target variable. if so add target variable to the list of varible to keep in the scored file -- END */

/*%put AAA &for_target_var;*/

/* score data */
proc hp4score data=&_infile_data_score_;
	score file=inmodel out=&_outfile_data_score_ (keep=&id_variables &outscore_statement);
	ID &id_statement;
run;

/* rescale probabilities if a resclaing factor file exists for the model -- START */
%let _filename_resc_prob_=&_filename_._probfac;
%if %sysfunc(fileexist("&_filename_resc_prob_")) %then %do;
		/* define fileref */
	filename inrscprb "&_filename_resc_prob_";
		/* import probability rescaling factors to a SAS data set */
	data _factors_;
		infile inrscprb dlm=" "  truncover;
		input target_value :$&_length_target_.. factor;
	run;

	%if %sysfunc(compare("binary","&_target_type_")) eq 0 %then %do;
		proc sql noprint;
			select factor into: _factory_ from _factors_ where target_value eq "&_targety_";
			select factor into: _factorn_ from _factors_ where target_value eq "&_targetn_";
		quit;
	
		data &_outfile_data_score_ (drop=p rename=(newp=p));
			set &_outfile_data_score_;
			newp=p*&_factory_/((1-p)*&_factorn_+p*&_factory_);
		run;
	%end;

	%if %sysfunc(compare("nominal","&_target_type_")) eq 0 %then %do;
		%transpose_nominal_score(&_outfile_data_score_,&id_variables,_target_var_=&for_target_var);

			/* */
		data _temp1_ (drop=target_value rename=(newt=target_value));
			set &_outfile_data_score_; 
			newt=strip(tranwrd(strip(target_value),"&target_variable",' '));
		run;
			/* */
		proc sql;
			create table _temp2_ (drop=p) as 
				select a1.*,a1.p*a2.factor as newp
			from _temp1_ a1 inner join _factors_ a2
			on strip(a1.target_value)=strip(a2.target_value);
		quit;

			/* */
		%let id_statement_comma=%sysfunc(tranwrd(&id_statement,%str( ),%str(,))); 
		proc sql;
			create table &_outfile_data_score_ (drop=newp) as 
				select *,newp/sum(newp) as p
				from _temp2_
			group by &id_statement_comma;
		quit;

			/* remove temp files */
		proc sql; drop table _temp1_,_temp2_;
	%end;

	/* remove temp files */
	proc sql; drop table _factors_;quit;
%end;
/* rescale probabilities if a resclaing factor file exists for the model -- END */

/* remove temporary files */
proc sql;drop table _contents_;quit;

%exit: %mend score_with_random_forest_base;
