%macro model_count_base(_infile_data_,list_var_file,path_for_binary_mdl_impl,model_identifier,
_distribution_,_seed_,trainvalidation=random,_trainfr_=0.7,train_with_equistrata=N,equistrata_option=tomin,
strata=target,do_unit_=N,samelib=yes) / store source des="";

/* PARAMETERS
1) _infile_data_: name (SASLIBRARY.SASFILENAME) of the SAS table with the data to model.
2) list_var_file: name (SASLIBRARY.SASFILENAME) of the SAS table with the type and scope of each variable in the _infile_data_ data set.
3) path_for_binary_mdl_impl: a valid system path were binary implementation of the model can be stored to score additional data sets.
4) model_identifier: a string identifiying the model specification e.g. RANFOR_example_1.
5) _distribution_:
6) _seed_: seed of the random number generator.
7) trainvalidation: how to split the original data set in a train and validation pair. Valid methods are 
	"random" (train & validation = random sample without replacement), 
	"stratified" (train & validation = random sample without replacement + train & validation data set have same frequency than original file for a given strata), 
	"bootstrap" (train = random sample with replacement, validation = records not selected for train).
	By default tha choice is "random".
8) _trainfr_: fraction of the original data set which is chosen for train. If trainvalidation=bootstrap, the 
	train data set has the same number of records as the original dataset however some record are repeated more than one 
	time (sampling with replacement).
9) train_with_equistrata: modify or not the train data set to have equal proportion of each strata (the strata variable might be different from target variable. Default is N (no).
10) equistrata_option: criteria used to modify train data set to reach equal sampling for each strata. Valid options are 
	"tomin" (sampling without replacement to produce a data set where all strata have the same number of records as the less frequent strata), 
	"tomax" (sampling with replacement to produce a data set where all strata have the same number of records as the most frequent strata),
	"logmean" (sampling with replacement to produce a data set where all strata have a number records which logarithm is the the average between the log of the 
		number of records of the more frequent strata and the less frequent strata).
	Default is "tomin".
11) strata: the strata variable. By default start=target indicating that the target variable is the strata variable.
12) _do_unit_: when target variable is a count, round the model predictions to the closest integer and 
	calculate the accuracy with the rounded quantity.
13) samelib: flag indicating if the output data sets generated by "model_count_base" are to be saved in the same SAS library as the table used for the model (yes by default).
*/

%put Executing: model_count_base;

%local _filename_; /* full (path + file name) system  name for the binary file where to store details of the model (useful to score new data set) */
%local target_variable; /* the name of the target variable  */
%local _length_; /* the legnth in bytes of the target variable */
%local id_variables; /* the variable/s identifying a records (e.g. person id ,transaction id) which we want to display when scoring a data set */ 
%local _final_train_; /* the name of the input file for the random forest algorithm */
%local library; /* SAS library where to store the output data sets ogenerated by the macro. Value of library is decide by value of samelib parameter */

/* initialize the value of library */
%if %sysfunc(compare("yes","&samelib")) eq 0 %then %do;
	%let library=%scan(&_infile_data_,1,'.');
%end; %else %do;
	%let library=work;
%end;

/* check if the target variable type is one the admitted ones */
%if (%sysfunc(compare("POISSON","&_distribution_")) ne 0) and 
	(%sysfunc(compare("NEGBINOMIAL","&_distribution_")) ne 0) %then %do;
	%put ERROR: Valid values for distribution parameter are POISSON and NEGBINOMIAL;  %goto exit;%goto exit;
%end;

/* define target variable */
proc sql NOPRINT;
	select length(strip(VARNAME)) into: _length_ from  &list_var_file where LEGEND eq 'TG';
	select strip(VARNAME) length=&_length_ into: target_variable from &list_var_file where LEGEND eq 'TG';
quit;

/* define id variables  */
proc sql NOPRINT;select strip(VARNAME) into: id_variables  separated by ' '  from &list_var_file where LEGEND eq 'ID';quit;

/* Generate TRAIN and VALIDATION data sets -- START */
%let valid_selection=N;
	/* RANDOM SAMPLING */
%if %sysfunc(compare("random","&trainvalidation")) eq 0 %then %do;
	%random_sampling (&_infile_data_,&list_var_file,_set_,&_seed_,_frac_=&_trainfr_);
	%let valid_selection=Y;
%end;
	/* BOOTSTRAP SAMPLING */
%if %sysfunc(compare("bootstrap","&trainvalidation")) eq 0 %then %do;
	%bootstrap_sampling (&_infile_data_,&list_var_file,_set_,&_seed_,_frac_=&_trainfr_);
	data _set__TR&_seed_ (drop=NumberHits i);
		set _set__TR&_seed_;
		do i=1 to NumberHits by 1;
			output;
		end;
	run;
	%let valid_selection=Y;
%end;
	/* STRATIFIED SAMPLING */
%if (%sysfunc(compare("stratified","&trainvalidation")) eq 0) %then %do;
	%if (%sysfunc(compare("target","&strata")) eq 0) %then %do;
		%put ERROR: Stratified option for creating train validation data sets is valid for interval targets only when the strata variable is not the target; %goto exit;
	%end;
	%else %do;
		%stratified_random_sampling (&_infile_data_,&list_var_file,_set_,&_seed_,_frac_=&_trainfr_,_strata_=&strata);
		%let valid_selection=Y;
	%end;
%end;
	/* */
%if  %sysfunc(compare("Y","&valid_selection")) ne 0 %then %do; 
	%put ERROR: Valid values for trainvalidation are "random", "bootstrap", "stratified";  %goto exit; 
%end;
%else %do;
	%let _final_train_=_set__TR&_seed_;
%end;
/* Generate TRAIN and VALIDATION data sets -- END */

LIBNAME templib "&path_for_binary_mdl_impl";
%let _filename_=templib.&model_identifier.;
%count_base(&_final_train_,&list_var_file,&_filename_,&_distribution_);

/* score validation data */
proc plm source=&_filename_;
	score data=work._set__vl1729 out=_validationscore_  (keep=&id_variables &target_variable predicted) predicted / ilink;

/* Accuracy Evaluation -- START */
%accuracy_interval(work._validationscore_,&library..&model_identifier._acc_val,&target_variable,do_unit=&_do_unit_);
%accuracy_interval_byqty(work._validationscore_,&library..&model_identifier._accbyqty_val,&target_variable);
/* Accuracy Evaluation -- END */

/* save file with variable importance statistics  */
data &library..&model_identifier._vimpo; set coefficients;run;
/* save file with mis-classification statistics as a function of number of trees (a way to judge if we have enough trees) */
data &library..&model_identifier._fitstat; set fit;run;
/* save file with scored validation data set   */
data &library..&model_identifier._valscr; set _validationscore_;run;

/* remove temporary files */
proc sql; drop table coefficients,fit,_set__VL&_seed_,_validationscore_,&_final_train_; quit;
%if  %sysfunc(compare("&train_with_equistrata","N")) ne 0 %then %do;
	proc sql; drop table _set__TR&_seed_; quit;
%end;
%exit: %mend model_count_base;
