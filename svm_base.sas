%macro svm_base(_infile_data_,list_var_file,_target_type_,_method_=IPOINT,_kernel_=LINEAR,_kernel_par_=,_targety_=Y,_targetn_=N)
/*/ store source des="Run Random Forest Algorithm"*/;

/* PARAMETERS
1) _infile_data_: name (SASLIBRARY.SASFILENAME) of the SAS table to analyze 
2) list_var_file: name (SASLIBRARY.SASFILENAME) of the SAS table with the type and scope of each variable in the data set to split
	i.e. if only a set of variable is of interest for modelling the value 'XX' in the colum LEGEND of &list_var_file identifyt the variable 
	to not include in the TRAIN and VALIDATION outputs.
3) store_filename: a valid system path+filename  were binary implementation of the model can be stored to score additional data set
4) _target_type_: ("binary","nominal","interval") The type of the target variable.
13) _targety_: one of the two values of the target variable. When scoring p=probability of _targety_ By deafult _target_ = 'Y'.
14) _targetn_: one of the two values of the target variable. By deafult _target_ = 'N'.

*/

%put Executing: svm_base with data &_infile_data_;

%local target_variable; /* proc hpforest statement to define the target variable of the model */
%local id_variables; /* list of  ID variables in the model (person ID, transaction ID, claim ID,.....)*/
%local nominal_variables; /* list of nominal variables */
%local nominal_statement; /* proc hpforest statement to include nominal variables as predictors in the model */
%local interval_variables; /* list of interval (continuous) variables*/ 
%local interval_statement; /* proc hpforest statement to include interval (continuous) variables as predictors in the model */ 
%local class_variables; /* list of categorical variables */
%local class_statement; /* proc hpforest statement to include categorical variables as predictors in the model */
%local _filename_; /* full (path + file name) system  name for the binary file where to store details of the model (useful to score new data set) */
%local outscore_statement; /* keep/rename adjustement for the score output generated by HPFOREST */
%local vimpo_statement; /* keep/rename adjustement for the varaible importance output generated by HPFOREST */
%local fit_statement; /* keep/rename adjustement for the fit goodness output generated by HPFOREST */

/* declare variables */
%let nominal_variables=;
%let class_variables=;
%let interval_variables=;
%let id_variables=;
%let target_variable=;

/* define target variable */
proc sql NOPRINT;
	select length(strip(VARNAME)) into: _length_ from  &list_var_file where LEGEND eq 'TG';
	select strip(VARNAME) length=&_length_ into: target_variable from &list_var_file where LEGEND eq 'TG';
quit;

/* define id variables */
proc sql NOPRINT;select strip(VARNAME) into: id_variables separated by ' '  from &list_var_file where LEGEND eq 'ID';quit;


/* check if class variables exists: if so make appropriate statement for proc hpforest -- START */
	/* define class statement */
proc sql NOPRINT;select strip(VARNAME) into: class_variables separated by ' '  from &list_var_file where LEGEND eq 'VC';quit;
%if %sysevalf(%superq(class_variables)=,boolean) ne 0 %then %do;
	%let class_statement=;
%end;
%else %do;
	%let  class_statement=%str(input )&class_variables.%str(/ level=nominal);
%end;
/* check if class variables exists: if so make appropriate statement for proc hpforest -- END */

/* check if nominal variables exists: if so make appropriate statement for proc hpforest -- START */
	/* prepare list of nominal variables */
proc sql NOPRINT;select strip(VARNAME) into: nominal_variables separated by ' '  from &list_var_file where LEGEND eq 'VN';quit;
%if %sysevalf(%superq(nominal_variables)=,boolean) ne 0 %then %do;
	%let nominal_statement=;
%end;
%else %do;
	%let  nominal_statement=%str(input )&nominal_variables.%str(/ level=nominal);
%end;
/* check if nominal variables exists: if so make appropriate statement for proc hpforest -- END */

/* check if interval variables exists: if so make appropriate statement for proc hpforest -- START */
	/* prepare list of interval variables */
proc sql NOPRINT;select strip(VARNAME) into: interval_variables separated by ' '  from &list_var_file where LEGEND eq 'VI';quit;
%if %sysevalf(%superq(interval_variables)=,boolean) ne 0 %then %do;
	%let interval_statement =;
%end;
%else %do;
	%let interval_statement=%str(input )&interval_variables.%str(/ level=interval);
%end;
/* check if interval variables exists: if so make appropriate statement for proc hpforest -- END */

/* prepare based on target type the keep/rename statements for the data set output of proc HPFOREST -- START */
	/* interval target */
%if %sysfunc(compare("interval","&_target_type_")) eq 0 %then %do; 
	%let outscore_statement= P_&target_variable R_&target_variable rename%str(=%()P_&target_variable %str(=)predicted R_&target_variable %str(=)residual%str(%));
	%let vimpo_statement=MSEOOB rename%str(=%()MSEOOB%str(=)OOB_MeanSquareError%str(%)); 
	%let fit_statement=PredOob rename%str(=%()PredOob%str(=)OOB_AverageSquareError%str(%));
%end;
	/* binary target */
%if %sysfunc(compare("binary","&_target_type_")) eq 0 %then %do;
	%let outscore_statement= P_&target_variable.&_targety_ rename%str(=%()P_&target_variable.&_targety_%str(=p%));
	%let vimpo_statement=GiniOOB rename%str(=%()GiniOOB%str(=)OOB_Gini%str(%));
	%let fit_statement=MiscOob rename%str(=%()MiscOob%str(=)OOB_Misclassification%str(%));
%end;
	/* nominal target */
%if %sysfunc(compare("nominal","&_target_type_")) eq 0 %then %do;
	%let outscore_statement= P_&target_variable%str(:) I_&target_variable F_&target_variable;
	%let vimpo_statement=GiniOOB rename%str(=%()GiniOOB%str(=)OOB_Gini%str(%));
	%let fit_statement=MiscOob rename%str(=%()MiscOob%str(=)OOB_Misclassification%str(%));
%end;


/*%if %sysevalf(%superq()=,boolean) ne 0 %then %do;*/
/*	%let nominal_statement=;*/
/*%end;*/
/*%else %do;*/
/*	%let  nominal_statement=%str(input )&nominal_variables.%str(/ level=nominal);*/
/*%end;*/

/* prepare based on target type the keep/rename statements for the data set output of proc HPFOREST -- END */

/* Run the random forest model */
/*filename outmodel "&store_filename";*/
ods listing close;
ods select none;
/*proc hpforest data=&_infile_data_  scoreprole=INBAG*/
/*	balance=no maxtrees=&ntrees vars_to_try=&maxnvar*/
/*	seed=&_seed_ trainfraction=&_trainfrRF_*/
/*	maxdepth=&_maxdepth_ leaffraction=&_leaffrac_*/
/*	alpha=&_alpha_;*/
/*	performance nthreads=4 details;*/
/*	target &target_variable / level=&_target_type_;*/
/*	&class_statement;*/
/*	&nominal_statement;*/
/*	&interval_statement;*/
/*	ID &id_variables &target_variable;*/
/*	ods output fitstatistics = fit (keep=NTrees NLeaves &fit_statement); */
/*	ods output VariableImportance = vimpo (keep=Variable NRules &vimpo_statement);*/
/*	save file=outmodel;*/
/*run;*/

%let kernel_par_statement=;
%put AAA &interval_statement;
%put BBB &nominal_statement;
proc hpsvm data=&_infile_data_ method=&_method_;
kernel &_kernel_ &kernel_par_statement;
	input &interval_statement;
	input &nominal_statement;
target &target_variable;
ID &id_variables;
output outclass=outclass outfit=outfit outest=outest;
run;


ods listing;
ods select all;

/* modify vimpo table */
/*proc sql;*/
/*alter table vimpo*/
/*  modify Variable char(32) format=$32.;*/
/*quit;*/

%mend svm_base;
