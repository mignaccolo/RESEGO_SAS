%macro model_ranfor_base(_infile_data_,list_var_file,path_for_binary_mdl_impl,model_identifier,_target_type_,
ntrees,maxnvar,_seed_,trainvalidation=random,_trainfr_=0.7,train_with_equistrata=N,equistrata_option=tomin,strata=target,
_trainfrRF_=0.6,_maxdepth_=50,_leaffrac_=0.0001,_alpha_=0.05,_targety_=Y,_targetn_=N,whichlib=same)/
store source des="Run a Random Forest Model: train/validation splitting + run random forest algorithm";

/* PARAMETERS
1) _infile_data_: name (SASLIBRARY.SASFILENAME) of the SAS table with the data to model.
2) list_var_file: name (SASLIBRARY.SASFILENAME) of the SAS table with the type and scope of each variable in the _infile_data_ data set.
3) path_for_binary_mdl_impl: a valid system path were binary implementation of the model can be stored to score additional data sets.
4) model_identifier: a string identifiying the model specification e.g. RANFOR_example_1.
5) _target_type_: ("binary","nominal","interval") The type of the target variable.
6) ntrees: number of trees in the (random) forest.
7) maxnvar: number of variables to be selected randomly at node splitting.
8) _seed_: seed of the random number generator.
9) trainvalidation: how to split the original data set in a train and validation pair. Valid methods are 
	"random" (train & validation = random sample without replacement), 
	"stratified" (train & validation = random sample without replacement + train & validation data set have same frequency than original file for a given strata), 
	"bootstrap" (train = random sample with replacement, validation = records not selected for train).
	By default tha choice is "random".
10) _trainfr_: fraction of the original data set which is chosen for train. If trainvalidation=bootstrap, the 
	train data set has the same number of records as the original dataset however some record are repeated more than one 
	time (sampling with replacement).
11) train_with_equistrata: modify or not the train data set to have equal proportion of each strata (the strata variable might be different from target variable. Default is N (no).
12) equistrata_option: criteria used to modify train data set to reach equal sampling for each strata. Valid options are 
	"tomin" (sampling without replacement to produce a data set where all strata have the same number of records as the less frequent strata), 
	"tomax" (sampling with replacement to produce a data set where all strata have the same number of records as the most frequent strata),
	"logmean" (sampling with replacement to produce a data set where all strata have a number records which logarithm is the the average between the log of the 
		number of records of the more frequent strata and the less frequent strata).
	Default is "tomin".
13) strata: the strata variable. By default start=target indicating that the target variable is the strata variable.
14) _trainfrRF_: in the random forest algorithm the fraction of the  input data set that is used to grow a tree (default=0.6)
	input data set = train data set created via "trainvalidation" and "train_with_equistrata" choices. 
15) _maxdepth_: the maximum number of nodes in each tree of the forest is 2^_maxdepth_ (provided that there are enough observation to populate all the leaves).
16) _leaffrac_: determines the minimum number of records a leaf must have for a splitting to occurr as the fraction of the number of records available for the growth of each tree 
	example input data set for the random forest algorithm has 100,000 records and we select _trainfr_=0.6 => each tree is grown with 60,000 records => a leaf must have at least 
	_leaffrac_*60,000 records. If _leaffrac=0.0001 (default), each leaf must have at least 6 records.
17) _alpha_: specifies a threshold p-value for the significance level of a test of association of a candidate variable with the target. 
	If no association meets this threshold, the node is not split.
18) _targety_: one of the two values of the target variable. When scoring p=probability of _targety_ By deafult _target_ = 'Y'.
19) _targetn_: one of the two values of the target variable. By deafult _target_ = 'N'.
20) whichlib: name of the SAS library where to store the output data sets generated by "model_ranfor_base" (by default=same inidcating that the same library as the model data should be used).
*/

%put Executing: model_ranfor_base;

%local _filename_; /* full (path + file name) system  name for the binary file where to store details of the model (useful to score new data set) */
%local target_variable; /* the name of the target variable  */
%local _length_; /* the legnth in bytes of the target variable */
%local id_variables; /* the variable/s identifying a record (e.g. person id ,transaction id) which we want to display when scoring a data set */ 
%local valid_selection; /* a flad checking that the values entered for the "trainvalidation" and "balnce" paramters are correct */
%local _final_train_; /* the name of the input file for the random forest algorithm */
%local library; /* SAS library where to store the output data sets ogenerated by the macro. Value of library is decide by value of whichlib parameter */
%local outscore_statement; /* keep/rename adjustement for the score output generated by HPFOREST */
%local vimpo_statement; /* keep/rename adjustement for the varaible importance output generated by HPFOREST */
%local fit_statement; /* keep/rename adjustement for the fit goodness output generated by HPFOREST */

/* initialize the value of library */
%if %sysfunc(compare("same","&whichlib")) eq 0 %then %do;
	%let library=%scan(&_infile_data_,1,'.');
%end; %else %do;
	%let library=&whichlib;
%end;

/* check if the target variable type is one the admitted ones */
%if (%sysfunc(compare("binary","&_target_type_")) ne 0) and 
	(%sysfunc(compare("nominal","&_target_type_")) ne 0) and 
	(%sysfunc(compare("interval","&_target_type_")) ne 0) %then %do;
	%put ERROR: Valid values for _target_type_ parameters are "binary", "nominal", "interval";%goto exit;
%end;

/* define target variable */
proc sql NOPRINT;
	select length(strip(VARNAME)) into: _length_ from  &list_var_file where LEGEND eq 'TG';
	select strip(VARNAME) length=&_length_ into: target_variable from &list_var_file where LEGEND eq 'TG';
quit;

/* define id variables  */
proc sql NOPRINT;select strip(VARNAME) into: id_variables  separated by ' '  from &list_var_file where LEGEND eq 'ID';quit;

/* Generate TRAIN and VALIDATION data sets -- START */
%let valid_selection=N;
	/* RANDOM SAMPLING */
%if %sysfunc(compare("random","&trainvalidation")) eq 0 %then %do;
	%random_sampling (&_infile_data_,&list_var_file,_set_,&_seed_,_frac_=&_trainfr_);
	%let valid_selection=Y;
%end;
	/* BOOTSTRAP SAMPLING */
%if %sysfunc(compare("bootstrap","&trainvalidation")) eq 0 %then %do;
	%bootstrap_sampling (&_infile_data_,&list_var_file,_set_,&_seed_,_frac_=&_trainfr_);
	data _set__TR&_seed_ (drop=NumberHits i);
		set _set__TR&_seed_;
		do i=1 to NumberHits by 1;
			output;
		end;
	run;
	%let valid_selection=Y;
%end;
	/* STRATIFIED SAMPLING */
%if (%sysfunc(compare("stratified","&trainvalidation")) eq 0) %then %do;
	%if (%sysfunc(compare("interval","&_target_type_")) eq 0) and (%sysfunc(compare("target","&strata")) eq 0) %then %do;
		%put ERROR: Stratified option for creating train validation data sets is valid for interval targets only when the strata variable is not the target; %goto exit;
	%end;
	%else %do;
		/* check if the strata to be used is the target variable -- START */
		%if %sysfunc(compare("&strata","target")) eq 0 %then %do;
			proc sql NOPRINT;select VARNAME into: strata from &list_var_file where LEGEND eq 'TG';quit;
		%end;
		/* check if the strata to be used is the target variable -- END */
		%stratified_random_sampling (&_infile_data_,&list_var_file,_set_,&_seed_,_frac_=&_trainfr_,_strata_=&strata);
		%let valid_selection=Y;
	%end;
%end;
	/* */
%if  %sysfunc(compare("Y","&valid_selection")) ne 0 %then %do; 
	%put ERROR: Valid values for trainvalidation are "random", "bootstrap", "stratified";  %goto exit; 
%end;
%else %do;
	%let _final_train_=_set__TR&_seed_;
%end;
/* Generate TRAIN and VALIDATION data sets -- END */


/* Update TRAIN dataset to have a data set with equal proportions of a strata -- START */
%let valid_selection=N;
%if (%sysfunc(compare("&train_with_equistrata","N")) ne 0) %then %do;
	%if (%sysfunc(compare("interval","&_target_type_")) eq 0) and (%sysfunc(compare("target","&strata")) eq 0) %then %do;
		%put ERROR: Stratified option for creating train validation data sets is valid for interval targets only when the strata variable is not the target; %goto exit;
	%end;
	%else %do;
		%if (%sysfunc(compare("tomin","&equistrata_option")) ne 0) and (%sysfunc(compare("tomax","&equistrata_option")) ne 0) 
		and (%sysfunc(compare("logmean","&equistrata_option")) ne 0) %then %do;
			%put ERROR: Valid values for equistrata are "tomin", "tomax", "logmean";%goto exit;
		%end;
		%equistrata_sampling(_set__TR&_seed_,&list_var_file,_mytrain_,&_seed_,_strata_=&strata,_equalizewith_=&equistrata_option);
		%let _final_train_=_mytrain_;
	%end;
%end;
/* Update TRAIN dataset to have a data set with equal proportions (if wanted) of a binary target variable values -- END */

/* prepare based on target type the keep/rename statements for the data set output of proc HPFOREST -- START */
	/* interval target */
%if %sysfunc(compare("interval","&_target_type_")) eq 0 %then %do; 
	%let outscore_statement= P_&target_variable rename%str(=%()P_&target_variable %str(=)predicted%str(%));
	%let vimpo_statement=MSEOOB rename%str(=%()MSEOOB%str(=)OOB_MeanSquareError%str(%)); 
	%let fit_statement=PredOob rename%str(=%()PredOob%str(=)OOB_AverageSquareError%str(%));
%end;
	/* binary target */
%if %sysfunc(compare("binary","&_target_type_")) eq 0 %then %do;
	%let outscore_statement= P_&target_variable.&_targety_ rename%str(=%()P_&target_variable.&_targety_%str(=p%));
	%let vimpo_statement=GiniOOB rename%str(=%()GiniOOB%str(=)OOB_Gini%str(%));
	%let fit_statement=MiscOob rename%str(=%()MiscOob%str(=)OOB_Misclassification%str(%));
%end;
	/* nominal target */
%if %sysfunc(compare("nominal","&_target_type_")) eq 0 %then %do;
	%let outscore_statement= P_&target_variable%str(:) I_&target_variable;
	%let vimpo_statement=GiniOOB rename%str(=%()GiniOOB%str(=)OOB_Gini%str(%));
	%let fit_statement=MiscOob rename%str(=%()MiscOob%str(=)OOB_Misclassification%str(%));
%end;
/* prepare based on target type the keep/rename statements for the data set output of proc HPFOREST -- END */

/* run the random forest algorithm -- START */
%let _filename_=&path_for_binary_mdl_impl.&model_identifier.;

	/* create model */

%ranfor_base(&_final_train_,&list_var_file,&_filename_,&_target_type_,&ntrees,&maxnvar,
work._internalscore_,&_seed_,_trainfrRF_=&_trainfrRF_,_maxdepth_=&_maxdepth_,
_leaffrac_=&_leaffrac_,_alpha_=&_alpha_,_targety_=&_targety_,_targetn_=&_targetn_);

	/* score validation */
ods listing close;
ods select none;
proc hp4score data=_set__VL&_seed_;
	score file=outmodel out=work._validationscore_ (keep=&id_variables &target_variable &outscore_statement);
	ID &id_variables  &target_variable;
run;
ods listing;
ods select all;

	/*  transpose score output in case of nominal target */
%if %sysfunc(compare("nominal","&_target_type_")) eq 0 %then %do;
	%transpose_nominal_score(work._validationscore_,&target_variable,&id_variables);
%end;

	/* rescale probabilities if train_with_equistrata=Y (train with equal proportion of strata). Available only for nominal and binary target -- START */
%if (%sysfunc(compare("&train_with_equistrata","N")) ne 0) and (%sysfunc(compare("binary","&_target_type_")) eq 0) %then %do;
	%rescale_probabilities_binary(&_infile_data_,&_final_train_,work._validationscore_,&target_variable,&_filename_,_targety_=&_targety_,_targetn_=&_targetn_);
%end;
%if (%sysfunc(compare("&train_with_equistrata","N")) ne 0) and (%sysfunc(compare("nominal","&_target_type_")) eq 0) %then %do;
	%rescale_probabilities_nominal(&_infile_data_,&_final_train_,work._validationscore_,&id_variables,&_filename_,_target_var_=&target_variable);
%end;
	/* rescale probabilities if train_with_equistrata=Y (train with equal proportion of strata). Available only for nominal and binary target -- END */
/* run the random forest algorithm -- END */

/* Accuracy Evaluation -- START */
	/* interval target: for interval target we use the average mean square error 
	and the weighted average mean square error with internal scoer and validation score */
%if %sysfunc(compare("interval","&_target_type_")) eq 0 %then %do;
	%accuracy_interval(work._validationscore_,&library..&model_identifier._acc_val,&target_variable);
%end;
	/* binary target: we calculate roc with internal score and validation score */
%if %sysfunc(compare("binary","&_target_type_")) eq 0 %then %do;
	%accuracy_roc(work._validationscore_,&library..&model_identifier._cval,&target_variable,_targety_=&_targety_,_targetn_=&_targetn_);
%end;
	/* nominal target: we calculate misclassification error */
%if %sysfunc(compare("nominal","&_target_type_")) eq 0 %then %do;
	%accuracy_nominal(work._validationscore_,&library..&model_identifier._nom_val,&target_variable,&id_variables);
%end;
/* Accuracy Evaluation -- END */

	/* save file with variable importance statistics  */
data &library..&model_identifier._vimpo; set vimpo;run;
	/* save file with mis-classification statistics as a function of number of trees (a way to judge if we have enough trees) */
data &library..&model_identifier._fit; set fit;run;
	/* save file with scored validation data set   */
data &library..&model_identifier._valscr; set _validationscore_;run;

/* remove temporary files */
proc sql; drop table vimpo,fit,_set__VL&_seed_,_validationscore_,&_final_train_; quit;
%if  %sysfunc(compare("&train_with_equistrata","N")) ne 0 %then %do;
	proc sql; drop table _set__TR&_seed_; quit;
%end;

%exit: %mend model_ranfor_base;
